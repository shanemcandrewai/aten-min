cmake_minimum_required(VERSION 3.10)

project(aten_min)

set(PYTORCH_SRC_DIR ../pytorch)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED True)
cmake_policy(SET CMP0076 NEW)

include(CMakeDependentOption)
option(RESET "Restore and modify PyTorch source tree")
CMAKE_DEPENDENT_OPTION(NO_BUILD_SHARED_LIBS "Do not build shared libraries" OFF RESET ON)
option(USE_CUDA "disable compiling CUDA, to save compile time")
option(USE_DISTRIBUTED "disable distributed (c10d, gloo, mpi, etc.) build")
option(USE_MKLDNN "disable using MKL-DNN")
option(USE_FBGEMM "disable using FBGEMM (quantized 8-bit server operators)")
option(USE_NNPACK "disable compiling with NNPACK")
option(USE_QNNPACK "disable QNNPACK build (quantized 8-bit operators)")
option(USE_XNNPACK "disable compiling with XNNPACK")
option(BUILD_CUSTOM_PROTOBUF "Build and use Caffe2's own protobuf under third_party")
option(BUILD_PYTHON "Build Python binaries")
option(BUILD_CAFFE2_OPS "Build Caffe2 operators")

if(RESET)
  find_package(Git)
  # Restore PyTorch working tree from HEAD
  if(Git_FOUND)
    execute_process(COMMAND ${GIT_EXECUTABLE} restore :/ WORKING_DIRECTORY ${PYTORCH_SRC_DIR})
  endif()

  if(NO_BUILD_SHARED_LIBS)
    file(READ ${PYTORCH_SRC_DIR}/CMakeLists.txt FILE_CONTENTS)
    string(REPLACE "option(BUILD_SHARED_LIBS \"Build libcaffe2.so\" ON)" "option(BUILD_SHARED_LIBS \"Build libcaffe2.so\")" FILE_CONTENTS "${FILE_CONTENTS}")
    file(WRITE ${PYTORCH_SRC_DIR}/CMakeLists.txt "${FILE_CONTENTS}")
  endif()

  file(READ ${PYTORCH_SRC_DIR}/cmake/Dependencies.cmake FILE_CONTENTS)
  string(REPLACE "add_subdirectory($\{CMAKE_SOURCE_DIR}/third_party/fmt" "add_subdirectory(${PYTORCH_SRC_DIR}/third_party/fmt ${CMAKE_BINARY_DIR}/third_party/fmt" FILE_CONTENTS "${FILE_CONTENTS}")
  file(WRITE ${PYTORCH_SRC_DIR}/cmake/Dependencies.cmake "${FILE_CONTENTS}")

  file(READ ${PYTORCH_SRC_DIR}/cmake/Codegen.cmake FILE_CONTENTS)
  string(REPLACE "set(GEN_COMMAND" "find_package(Python)\n  set(GEN_COMMAND" FILE_CONTENTS "${FILE_CONTENTS}")
  string(REPLACE "PYTHON_EXECUTABLE" "Python_EXECUTABLE" FILE_CONTENTS "${FILE_CONTENTS}")
  string(REPLACE "$\{CMAKE_SOURCE_DIR}" "${CMAKE_SOURCE_DIR}/${PYTORCH_SRC_DIR}" FILE_CONTENTS "${FILE_CONTENTS}")
  string(REPLACE "CMAKE_PROJECT_NAME" "PROJECT_NAME" FILE_CONTENTS "${FILE_CONTENTS}")
  file(WRITE ${PYTORCH_SRC_DIR}/cmake/Codegen.cmake "${FILE_CONTENTS}")

  file(READ ${PYTORCH_SRC_DIR}/caffe2/core/common.h FILE_CONTENTS)
  string(REPLACE "caffe2/core/macros.h" "${CMAKE_BINARY_DIR}/caffe2/core/macros.h" FILE_CONTENTS "${FILE_CONTENTS}")
  file(WRITE ${PYTORCH_SRC_DIR}/caffe2/core/common.h "${FILE_CONTENTS}")
endif()

add_subdirectory(${PYTORCH_SRC_DIR} ${CMAKE_BINARY_DIR}/pytorch)
add_executable(aten_min aten_min.cpp)

target_include_directories(aten_min PUBLIC build)
target_include_directories(aten_min PUBLIC build/aten/src/)
target_include_directories(aten_min PUBLIC ${PYTORCH_SRC_DIR})
target_include_directories(aten_min PUBLIC ${PYTORCH_SRC_DIR}/aten/src)

target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/aten/src/ATen/core/Dict.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/aten/src/ATen/core/Dimname.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/aten/src/ATen/core/Formatting.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/aten/src/ATen/core/List.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/aten/src/ATen/core/NamedTensor.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/aten/src/ATen/core/Tensor.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/aten/src/ATen/core/VariableHooksInterface.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/aten/src/ATen/core/boxing/KernelFunction.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/aten/src/ATen/core/dispatch/DispatchKeyExtractor.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/aten/src/ATen/core/dispatch/Dispatcher.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/aten/src/ATen/core/dispatch/OperatorEntry.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/aten/src/ATen/core/grad_mode.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/aten/src/ATen/core/interned_strings.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/aten/src/ATen/core/ivalue.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/aten/src/ATen/core/op_registration/infer_schema.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/aten/src/ATen/core/operator_name.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/aten/src/ATen/core/register_symbols.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/aten/src/ATen/core/type.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/c10/core/DefaultDtype.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/c10/core/Device.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/c10/core/DeviceType.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/c10/core/DispatchKey.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/c10/core/DispatchKeySet.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/c10/core/TensorImpl.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/c10/core/UndefinedTensorImpl.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/c10/core/impl/LocalDispatchKeySet.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/c10/util/Backtrace.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/c10/util/Exception.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/c10/util/Logging.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/c10/util/SmallVector.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/c10/util/StringUtil.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/c10/util/Type.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/c10/util/UniqueVoidPtr.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/c10/util/flags_use_no_gflags.cpp)
target_sources(aten_min PUBLIC ${PYTORCH_SRC_DIR}/c10/util/typeid.cpp)
target_sources(aten_min PUBLIC build/aten/src/ATen/Functions.cpp)
target_sources(aten_min PUBLIC build/aten/src/ATen/core/TensorMethods.cpp)
